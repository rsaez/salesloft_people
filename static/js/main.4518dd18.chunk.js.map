{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["req","Request","CORS_PROXY_URL","headers","authorization","process","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","people","displayName","emailAddress","title","isLoaded","_this2","fetch","then","res","json","console","log","peopleArray","displayNameArray","emailAddressArray","titleArray","i","data","push","display_name","email_address","setState","catch","err","react_default","a","createElement","className","map","style","width","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oMAUMA,EAAM,IAAIC,QAAQC,+EALN,CAChBC,QAAS,CACPC,cAJYC,gFAkFDC,cAxEb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,OAAQ,GACRC,YAAa,GACbC,aAAc,GACdC,MAAO,GACPC,UAAU,GAPKZ,mFAWC,IAAAa,EAAAV,KAClBW,MAAMtB,GACHuB,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAE,GACJC,QAAQC,IAAI,QAASF,GAErB,IAAIG,EAAc,GACdC,EAAmB,GACnBC,EAAoB,GACpBC,EAAa,GAEjB,IAAK,IAAIC,KAAKP,EAAKQ,KACjBL,EAAYM,KAAK,CACfT,EAAKQ,KAAKD,GAAGG,aACbV,EAAKQ,KAAKD,GAAGI,cACbX,EAAKQ,KAAKD,GAAGb,QAIjB,IAAK,IAAIa,KAAKP,EAAKQ,KACjBJ,EAAiBK,KAAKT,EAAKQ,KAAKD,GAAGG,cAGrC,IAAK,IAAIH,KAAKP,EAAKQ,KACjBH,EAAkBI,KAAKT,EAAKQ,KAAKD,GAAGI,eAGtC,IAAK,IAAIJ,KAAKP,EAAKQ,KACjBF,EAAWG,KAAKT,EAAKQ,KAAKD,GAAGb,OAG/BO,QAAQC,IAAI,aAAcC,GAE1BP,EAAKgB,SAAS,CACZjB,UAAU,EACVJ,OAAQY,EACRX,YAAaY,EACbX,aAAcY,EACdX,MAAOY,MAGVO,MAAM,SAAAC,GAAG,OAAIb,QAAQC,IAAIY,sCAI5B,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACZhC,KAAKI,MAAMC,OAAO4B,IAAI,SAAAT,GAAY,OACjCK,EAAAC,EAAAC,cAAA,OAAKG,MAAO,CAAEC,MAAO,KAAOH,UAAU,YACpCH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,+BACZH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAmBR,EAAa,IAC9CK,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAmBR,EAAa,IAC9CK,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAmBR,EAAa,gBAhE1CY,aCAEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAOd,EAAAC,EAAAC,cAACa,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrC,KAAK,SAAAsC,GACjCA,EAAaC","file":"static/js/main.4518dd18.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nconst API_URL = process.env.REACT_APP_API_URL;\nconst API_KEY = process.env.REACT_APP_API_KEY;\nconst CORS_PROXY_URL = process.env.REACT_APP_CORS_PROXY_URL;\nconst SL_HEADER = {\n  headers: {\n    authorization: API_KEY\n  }\n};\nconst req = new Request(CORS_PROXY_URL + API_URL, SL_HEADER);\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      people: [],\n      displayName: [],\n      emailAddress: [],\n      title: [],\n      isLoaded: false\n    };\n  }\n\n  componentDidMount() {\n    fetch(req)\n      .then(res => res.json())\n      .then(json => {\n        console.log(\"json \", json);\n\n        let peopleArray = [];\n        let displayNameArray = [];\n        let emailAddressArray = [];\n        let titleArray = [];\n\n        for (let i in json.data) {\n          peopleArray.push([\n            json.data[i].display_name,\n            json.data[i].email_address,\n            json.data[i].title\n          ]);\n        }\n\n        for (let i in json.data) {\n          displayNameArray.push(json.data[i].display_name);\n        }\n\n        for (let i in json.data) {\n          emailAddressArray.push(json.data[i].email_address);\n        }\n\n        for (let i in json.data) {\n          titleArray.push(json.data[i].title);\n        }\n\n        console.log(\"resArray: \", peopleArray);\n\n        this.setState({\n          isLoaded: true,\n          people: peopleArray,\n          displayName: displayNameArray,\n          emailAddress: emailAddressArray,\n          title: titleArray\n        });\n      })\n      .catch(err => console.log(err));\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        {this.state.people.map(display_name => (\n          <div style={{ width: 400 }} className=\"card m-5\">\n            <ul className=\"list-group list-group-flush\">\n              <li className=\"list-group-item\">{display_name[0]}</li>\n              <li className=\"list-group-item\">{display_name[1]}</li>\n              <li className=\"list-group-item\">{display_name[2]}</li>\n            </ul>\n          </div>\n        ))}\n      </div>\n    );\n  } //end of render\n} // end of App class\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}